{
  "wip": true,
  "id": "define_trait",
  "name": "define-trait",
  "byname": "",
  "inputs": "VarName, [MethodSignature]",
  "output": "Not Applicable",
  "signature": "(define-trait trait-name ((func1-name (arg1-type arg2-type ...) (return-type))))",
  "since": 2.1,
  "description": [
    "<i>define-trait</i> is used to define a new trait definition for use in a smart contract. Other contracts can implement a given trait and then have their contract identifier being passed as a function argument in order to be called dynamically with <i>contract-call?</i>.",
    "Traits are defined with a name, and a list functions, defined with a name, a list of argument types, and return type.",
    "In Clarity 1, a trait type can be used to specify the type of a function parameter. A parameter with a trait type can be used as the target of a dynamic <i>contract-call?</i>. A principal literal (e.g. <i>ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.foo</i>) may be passed as a trait parameter if the specified contract implements all of the functions specified by the trait. A trait value (originating from a parameter with trait type) may also be passed as a trait parameter if the types are the same.",
    "Beginning in Clarity 2, a trait can be used in all of the same ways that a built-in type can be used, except that it cannot be stored in a data var or map, since this would inhibit static analysis. This means that a trait type can be embedded in a compound type (e.g. <i>(optional &lt;my-trait&gt;)</i> or <i>(list 4 &lt;my-trait&gt;)</i>) and a trait value can be bound to a variable in a <i>let</i> or <i>match</i> expression. In addition to the principal literal and trait value with matching type allowed in Clarity 1, Clarity 2 also supports implicit casting from a compatible trait, meaning that a value of type <i>trait-a</i> may be passed to a parameter with type <i>trait-b</i> if <i>trait-a</i> includes all of the requirements of <i>trait-b</i> (and optionally additional functions).",
    "Like other kinds of definition statements, <i>define-trait</i> may only be used at the top level of a smart contract definition (i.e., you cannot put a define statement in the middle of a function body)."
  ],
  "examples": [],
  "example": [
    [">", "(define-trait token-trait"],
    [">", "((transfer? (principal principal uint) (response uint uint))"],
    [">", "(get-balance (principal) (response uint uint))))"]
  ]
}
