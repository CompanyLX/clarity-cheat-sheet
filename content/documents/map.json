{
  "wip": true,
  "id": "map",
  "name": "map",
  "byname": "",
  "input": "Function(A, B, ..., N) -> X, sequence_A, sequence_B, ..., sequence_N",
  "output": "(list X)",
  "signature": "",
  "since": 2.1,
  "description": [
    "The <i>map</i> function applies the function <i>func</i> to each corresponding element of the input sequences, and outputs a <u>list</u> of the same type containing the outputs from those function applications. Applicable sequence types are <i>(list A)</i>, <i>buff</i>, <i>string-ascii</i> and <i>string-utf8</i>, for which the corresponding element types are, respectively, <i>A</i>, <i>(buff 1)</i>, <i>(string-ascii 1)</i> and <i>(string-utf8 1)</i>. The <i>func</i> argument must be a literal function name. Also, note that, no matter what kind of sequences the inputs are, the output is always a list."
  ],
  "signature": "(map func sequence_A sequence_B ... sequence_N)",
  "examples": [
    [
      ">",
      "(map not (list true false true false))"
    ],
    [
      "<",
      "(false true false true)"
    ],
    [
      ">",
      "(map + (list 1 2 3) (list 1 2 3) (list 1 2 3))"
    ],
    [
      "<",
      "(3 6 9)"
    ],
    [
      ">",
      "(define-private (a-or-b (char (string-utf8 1))) (if (is-eq char u\"a\") u\"a\" u\"b\"))"
    ],
    [
      ">",
      "(map a-or-b u\"aca\")"
    ],
    [
      "<",
      "(u\"a\" u\"b\" u\"a\")"
    ],
    [
      ">",
      "(define-private (zero-or-one (char (buff 1))) (if (is-eq char 0x00) 0x00 0x01))"
    ],
    [
      ">",
      "(map zero-or-one 0x000102)"
    ],
    [
      "<",
      "(0x00 0x01 0x01)"
    ]
  ]
}