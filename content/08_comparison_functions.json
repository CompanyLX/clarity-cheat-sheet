{
  "id": "comparison_functions",
  "name": "Comparison Functions",
  "entries": [
    {
      "id": "is_eq",
      "name": "is-eq",
      "input": "A, A, ...",
      "output": "bool",
      "signature": "(is-eq v1 v2...)",
      "description": "Compares the inputted values, returning `true` if they are all equal. Note that _unlike_ the `(and ...)` function, `(is-eq ...)` will _not_ short-circuit. All values supplied to is-eq _must_ be the same type.",
      "examples": [
        {
          "command": "(is-eq 1 1)",
          "output": "true"
        },
        {
          "command": "(is-eq true false)",
          "output": "false"
        },
        {
          "command": "(is-eq \"abc\" 234 234)",
          "error": true
        }
      ]
    },
    {
      "id": "less_than_or_equal",
      "name": "<=",
      "byname": "less than or equal",
      "input": "int, int | uint, uint",
      "output": "bool",
      "signature": "(<= number1 number2)",
      "description": "Compares two integers, returning true if `i1` is less than or equal to `i2` and `false` otherwise. i1 and i2 must be of the same type. Starting with Stacks 1.0, the `<=`-comparable types are `int` and `uint`. Starting with Stacks 2.1, the `<=`-comparable types are expanded to include `string-ascii`, `string-utf8` and `buff`.",
      "examples": [
        {
          "command": "(<= 1 1)",
          "output": "true"
        },
        {
          "command": "(<= 5 2)",
          "output": "false"
        },
        {
          "command": "(<= 3 6)",
          "output": "true"
        },
        {
          "command": "(<= \"aaa\" \"baa\")",
          "output": "true"
        },
        {
          "command": "(<= \"aa\" \"aaa\")",
          "output": "true"
        },
        {
          "command": "(<= 0x01 0x02)",
          "output": "true"
        },
        {
          "command": "(<= 5 u2)",
          "error": true
        }
      ]
    },
    {
      "id": "less_than",
      "name": "<",
      "byname": "less than",
      "input": "int, int | uint, uint",
      "output": "bool",
      "signature": "(< number1 number2)",
      "description": "Compares two integers, returning `true` if `i1` is less than `i2` and `false` otherwise. i1 and i2 must be of the same type. Starting with Stacks 1.0, the `<`-comparable types are `int` and `uint`. Starting with Stacks 2.1, the `<`-comparable types are expanded to include `string-ascii`, `string-utf8` and `buff`.",
      "examples": [
        {
          "command": "(< 1 2)",
          "output": "true"
        },
        {
          "command": "(< 1 1)",
          "output": "false"
        },
        {
          "command": "(< 5 2)",
          "output": "false"
        },
        {
          "command": "(< \"aaa\" \"baa\")",
          "output": "true"
        },
        {
          "command": "(< \"aa\" \"aaa\")",
          "output": "true"
        },
        {
          "command": "(< 0x01 0x02)",
          "output": "true"
        },
        {
          "command": "(< 5 u2)",
          "error": true
        }
      ]
    },
    {
      "id": "greater_than_or_equal",
      "name": ">=",
      "byname": "greater than or equal",
      "input": "int, int | uint, uint | string-ascii, string-ascii | string-utf8, string-utf8 | buff, buff",
      "output": "bool",
      "signature": "(>= type1 type2)",
      "description": "Compares the value of the two types, returning `true` if `type1` is greater than or equal to `tyoe2` and `false` otherwise. type1 and type2 must be of the same type.",
      "examples": [
        {
          "command": "(>= 1 1)",
          "output": "true"
        },
        {
          "command": "(>= 5 2)",
          "output": "true"
        },
        {
          "command": "(>= 3 6)",
          "output": "false"
        },
        {
          "command": "(>= \"baa\" \"aaa\")",
          "output": "true"
        },
        {
          "command": "(>= \"aaa\" \"aa\")",
          "output": "true"
        },
        {
          "command": "(>= 0x02 0x01)",
          "output": "true"
        },
        {
          "command": "(>= 5 u2)",
          "error": true
        }
      ]
    },
    {
      "id": "greater_than",
      "name": ">",
      "byname": "greater than",
      "input": "int, int | uint, uint",
      "output": "bool",
      "signature": "(> number1 number2)",
      "description": "ompares two integers, returning `true` if `i1` is greater than `i2` and false otherwise. i1 and i2 must be of the same type. Starting with Stacks 1.0, the `>`-comparable types are `int` and `uint`. Starting with Stacks 2.1, the `>`-comparable types are expanded to include `string-ascii`, `string-utf8` and `buff`.",
      "examples": [
        {
          "command": "(> 1 2)",
          "output": "false"
        },
        {
          "command": "(> 1 1)",
          "output": "false"
        },
        {
          "command": "(> 5 2)",
          "output": "true"
        },
        {
          "command": "(> \"baa\" \"aaa\")",
          "output": "true"
        },
        {
          "command": "(> \"aaa\" \"aa\")",
          "output": "true"
        },
        {
          "command": "(> 0x02 0x01)",
          "output": "true"
        },
        {
          "command": "(> 5 u2)",
          "error": true
        }
      ]
    },
    {
      "id": "is_ok",
      "name": "is-ok",
      "input": "(response A B)",
      "output": "bool",
      "signature": "(is-ok value)",
      "description": "<u>is-ok</u> tests a supplied response value, returning <u>true</u> if the response was <u>ok</u>, and <u>false</u> if it was an <u>err</u>.",
      "examples": [
        {
          "command": "(is-ok (ok 1))",
          "output": "true"
        },
        {
          "command": "(is-ok (err 1))",
          "output": "false"
        }
      ]
    },
    {
      "id": "is_err",
      "name": "is-err",
      "input": "(response A B)",
      "output": "bool",
      "signature": "(is-err value)",
      "description": "<u>is-err</u> tests a supplied response value, returning <u>true</u> if the response was an <u>err</u>, and <u>false</u> if it was an <u>ok</u>.",
      "examples": [
        {
          "command": "(is-err (ok 1))",
          "output": "false"
        },
        {
          "command": "(is-err (err 1))",
          "output": "true"
        }
      ]
    },
    {
      "id": "is_some",
      "name": "is-some",
      "input": "(optional A)",
      "output": "bool",
      "signature": "(is-some value)",
      "description": "<u>is-some</u> tests a supplied option value, returning <u>true</u> if the option value is <u>(some ...)</u>, and <u>false</u> if it is a <u>none</u>.",
      "examples": [
        {
          "command": "(define-map names-map { name: (string-ascii 12) } { id: int })",
          "output": ""
        },
        {
          "command": "(map-set names-map { name: \"blockstack\" } { id: 1337 })",
          "output": ""
        },
        {
          "command": "(is-some (get id (map-get? names-map { name: \"blockstack\" })))",
          "output": "true"
        },
        {
          "command": "(is-some (get id (map-get? names-map { name: \"non-existant\" })))",
          "output": "false"
        }
      ]
    },
    {
      "id": "is_none",
      "name": "is-none",
      "input": "(optional A)",
      "output": "bool",
      "signature": "(is-none value)",
      "description": "<u>is-none</u> tests a supplied option value, returning <u>true</u> if the option value is <u>(none)</u>, and <u>false</u> if it is a <u>(some ...)</u>.",
      "examples": [
        {
          "command": "(define-map names-map { name: (string-ascii 12) } { id: int })",
          "output": ""
        },
        {
          "command": "(map-set names-map { name: \"blockstack\" } { id: 1337 })",
          "output": ""
        },
        {
          "command": "(is-none (get id (map-get? names-map { name: \"blockstack\" })))",
          "output": "false"
        },
        {
          "command": "(is-none (get id (map-get? names-map { name: \"non-existant\" })))",
          "output": "true"
        }
      ]
    },
    {
      "id": "is-standard",
      "name": "is-standard",
      "input": "principal",
      "output": "bool",
      "signature": "(is-standard principal)",
      "description": "Tests whether `standard-or-contract-principal` _matches_ the current network type, and therefore represents a principal that can spend tokens on the current network type. That is, the network is either of type `mainnet`, or `testnet`. Only `SPxxxx` and `SMxxxx` _c32check form_ addresses can spend tokens on a mainnet, whereas only `STxxxx` and `SNxxxx` _c32check forms_ addresses can spend tokens on a testnet. All addresses can _receive_ tokens, but only principal _c32check form_ addresses that match the network type can _spend_ tokens on the network.  This method will return `true` if and only if the principal matches the network type, and false otherwise.",
      "examples": [
        {
          "command": "(is-standard 'STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6)",
          "output": ";; returns true on testnet and false on mainnet"
        },
        {
          "command": "(is-standard 'STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6.foo)",
          "output": ";; returns true on testnet and false on mainnet"
        },
        {
          "command": "(is-standard 'SP3X6QWWETNBZWGBK6DRGTR1KX50S74D3433WDGJY)",
          "output": ";; returns true on mainnet and false on testnet"
        },
        {
          "command": "(is-standard 'SP3X6QWWETNBZWGBK6DRGTR1KX50S74D3433WDGJY.foo)",
          "output": ";; returns true on mainnet and false on testnet"
        },
        {
          "command": "(is-standard 'SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR)",
          "output": ";; returns false on both mainnet and testnet"
        }
      ]
    }
  ]
}
