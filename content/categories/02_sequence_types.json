{
  "id": "sequence_types",
  "name": "Sequence Types",
  "entries": [
    {
      "id": "buff",
      "name": "buff",
      "signature": "(buff MAXIMUM_LENGTH)",
      "description": "Buffers are unstructured data of a <mark>fixed maximum length</mark>. Length must be a positive integer (numbers greater than 0).<br/>Buffer values always start with the prefix 0x followed by a hexadecimal string. Each byte is thus represented by two so-called hexits.<br/><br/>Notice although maximum length must be a postive integer there is <mark>no unsigned integer prefix character <strong>u</strong></mark>.",
      "examples": [
        {
          "command": "0x68656c6c6f21",
          "output": "0x68656c6c6f21"
        },
        {
          "command": "0x0304",
          "output": "0x0304"
        },
        {
          "command": "(define-data-var variable (buff 5) 0x0102030405)",
          "output": "(none)"
        },
        {
          "command": "(len (var-get variable))",
          "output": "u5"
        },
        {
          "command": "(var-get variable)",
          "output": "0x0102030405"
        }
      ]
    },
    {
      "id": "string_ascii",
      "name": "string-ascii",
      "signature": "(string-ascii max-len)",
      "description": "",
      "examples": [
        {
          "command": "\"This is an ASCII string.\"",
          "output": "\"This is an ASCII string.\""
        }
      ]
    },
    {
      "id": "string_utf8",
      "name": "string-utf8",
      "signature": "(string-utf8 MAXIMUM_LENGTH)",
      "description": "",
      "examples": [
        {
          "command": "u\"And this is an UTF-8 string \\u{1F60B}.\"",
          "output": "u\"And this is an UTF-8 string \\u{1F60B}.\""
        }
      ]
    },
    {
      "id": "list",
      "name": "list",
      "signature": "(list max-len entry-type)",
      "description": "",
      "examples": [
        {
          "command": "(list 4 8 15 16 23 42)",
          "output": "[4, 8, 15, 16, 23, 42]"
        },
        {
          "command": "(list \"Hello\" \"World\" \"!\")",
          "output": "[\"Hello\", \"World\", \"!\"]"
        },
        {
          "command": "(list u5 10 \"hello\")",
          "error": true
        }
      ]
    }
  ]
}
