{
  "id": "logical_operators",
  "name": "Logical Operators",
  "entries": [
    {
      "id": "xor",
      "name": "xor",
      "input": "int, int | uint, uint",
      "output": "int | uint",
      "signature": "(xor number1 number2)",
      "description": "Returns the result of bitwise exclusive or'ing <u>number1</u> with <u>number2</u>.",
      "examples": [
        {
          "command": "(xor 1 2)",
          "output": "3"
        },
        {
          "command": "(xor 120 280)",
          "output": "352"
        }
      ]
    },
    {
      "id": "and",
      "name": "and",
      "input": "bool, ...",
      "output": "bool",
      "signature": "(and b1 b2 ...)",
      "description": "Returns <u>true</u> if all boolean inputs are <u>true</u>. Importantly, the supplied arguments are evaluated in-order and lazily. Lazy evaluation means that if one of the arguments returns <u>false</u>, the function short-circuits, and no subsequent arguments are evaluated.",
      "examples": [
        {
          "command": "(and true false)",
          "output": "false"
        },
        {
          "command": "(and (is-eq (+ 1 2) 1) (is-eq 4 4))",
          "output": "false"
        },
        {
          "command": "(and (is-eq (+ 1 2) 3) (is-eq 4 4))",
          "output": "true"
        }
      ]
    },
    {
      "id": "or",
      "name": "or",
      "input": "bool, ...",
      "output": "bool",
      "signature": "(or b1 b2 ...)",
      "description": "Returns <u>true</u> if any boolean inputs are <u>true</u>. Importantly, the supplied arguments are evaluated in-order and lazily. Lazy evaluation means that if one of the arguments returns <u>true</u>, the function short-circuits, and no subsequent arguments are evaluated.",
      "examples": [
        {
          "command": "(or true false)",
          "output": "true"
        },
        {
          "command": "(or (is-eq (+ 1 2) 1) (is-eq 4 4))",
          "output": "true"
        },
        {
          "command": "(or (is-eq (+ 1 2) 1) (is-eq 3 4))",
          "output": "false"
        },
        {
          "command": "(or (is-eq (+ 1 2) 3) (is-eq 4 4))",
          "output": "true"
        }
      ]
    },
    {
      "id": "not",
      "name": "not",
      "input": "bool",
      "output": "bool",
      "signature": "(not b1)",
      "description": "Returns the inverse of the boolean input.",
      "examples": [
        {
          "command": "(not true)",
          "output": "false"
        },
        {
          "command": "(not (is-eq 1 2))",
          "output": "true"
        }
      ]
    }
  ]
}
