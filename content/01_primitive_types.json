{
  "id": "primitive_types",
  "name": "Primitive Types",
  "entries": [
    {
      "id": "int",
      "name": "int",
      "byname": "Signed Integer",
      "description": "<mark>int</mark>, short for (<mark>signed</mark>) integer, is a primitive data type represents whole <mark>128 bits numbers</mark> that range from <wbr>-170,</wbr><wbr>141,</wbr><wbr>183,</wbr><wbr>460,</wbr><wbr>469,</wbr><wbr>231,</wbr><wbr>731,</wbr><wbr>687,</wbr><wbr>303,</wbr><wbr>715,</wbr><wbr>884,</wbr><wbr>105,</wbr><wbr>728</wbr> (-2<sup>127</sup>) to <wbr>170,</wbr><wbr>141,</wbr><wbr>183,</wbr><wbr>460,</wbr><wbr>469,</wbr><wbr>231,</wbr><wbr>731,</wbr><wbr>687,</wbr><wbr>303,</wbr><wbr>715,</wbr><wbr>884,</wbr><wbr>105,</wbr><wbr>727</wbr> (2<sup>127</sup> - 1).",
      "examples": [
        {
          "command": "0",
          "output": "0"
        },
        {
          "command": "8738374837209",
          "output": "8738374837209"
        },
        {
          "command": "-31",
          "output": "-31"
        },
        {
          "command": "-724542508",
          "output": "-724542508"
        }
      ]
    },
    {
      "id": "uint",
      "name": "uint",
      "byname": "Unsigned Integer",
      "description": "<mark>int</mark>, short for <mark>unsigned</mark> integer, is a primitive data type represents whole <mark>128 bits numbers</mark> that range from 0 to <wbr>340</wbr><wbr>282</wbr><wbr>366</wbr><wbr>920</wbr><wbr>938</wbr><wbr>463</wbr><wbr>463</wbr><wbr>374</wbr><wbr>607</wbr><wbr>431</wbr><wbr>768</wbr><wbr>211</wbr><wbr>455</wbr> (2<sup>128</sup> - 1).<br/>Unsigned integers are <mark>always prefixed by the character <strong>u</strong>.</mark>",
      "examples": [
        {
          "command": "u0",
          "output": "u0"
        },
        {
          "command": "u66",
          "output": "u66"
        },
        {
          "command": "u40935094534",
          "output": "u40935094534"
        }
      ]
    },
    {
      "id": "bool",
      "name": "bool",
      "byname": "Boolean",
      "description": "<mark>bool</mark>, short for boolean. A boolean value is either <mark>true</mark> or <mark>false</mark>. They are used to check if a certain condition is met or unmet (true or false).",
      "examples": [
        {
          "command": "true",
          "output": "true"
        },
        {
          "command": "false",
          "output": "false"
        }
      ]
    },
    {
      "id": "principal",
      "name": "principal",
      "description": "A principal is a special type in Clarity and and represents an address on the blockchain.<br/><br/>Clarity admits two different kinds of principals: standard principals and contract principals. <mark>Standard principals are backed by a corresponding private key</mark> whilst <mark>contract principals point to a smart contract</mark>.<br/><br/>Principals follow a specific structure; and always start with the characters. For example, they starts with <mark>SP on Stacks blockchain mainnet</mark> and start with <mark>ST on the testnet and mocknet</mark>.<br/><br/>Contract principals are a <mark>compound of the standard principal that deployed the contract and the contract name, delimited by a dot</mark>.<br/><br/>A literal principal value is prefixed by a single quote (<mark>'</mark>) in Clarity. Notice there is <mark>no closing single quote</mark>.",
      "examples": [
        {
          "command": "'SP1HTBVD3JG9C05J7HBJTHGR0GGW7KXW28M5JS8QE",
          "output": "SP1HTBVD3JG9C05J7HBJTHGR0GGW7KXW28M5JS8QE"
        },
        {
          "command": "'SP1HTBVD3JG9C05J7HBJTHGR0GGW7KXW28M5JS8QE.my-awesome-contract",
          "output": "SP1HTBVD3JG9C05J7HBJTHGR0GGW7KXW28M5JS8QE.my-awesome-contract"
        },
        {
          "command": "'ST000000000000000000002AMW42H",
          "output": "ST000000000000000000002AMW42H"
        },
        {
          "command": "'ST000000000000000000002AMW42H.smart-contract-test",
          "output": "ST000000000000000000002AMW42H.smart-contract-test"
        }
      ]
    }
  ]
}
